{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\super\\\\client-starter-code\\\\src\\\\components\\\\containers\\\\EditStudentContainer.js\";\nimport Header from \"./Header\";\nimport { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Redirect } from \"react-router-dom\";\nimport EditStudentView from \"../views/EditStudentView\";\nimport { fetchStudentThunk, editStudentThunk } from \"../../store/thunks\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass EditStudentContainer extends Component {\n  // Initialize state\n  constructor(props) {\n    super(props);\n\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n      console.log(\"Student Updated\");\n    };\n\n    this.handleSubmit = async event => {\n      //prevents page from refreshing after submitting\n      event.preventDefault();\n      let student = {\n        firstname: this.state.firstname,\n        lastname: this.state.lastname,\n        email: this.state.email,\n        imageUrl: this.state.imageUrl,\n        gpa: this.state.gpa,\n        campusId: this.state.campusId\n      }; //updates Student data in the db\n\n      await this.props.editStudent(student, this.props.student.id); //updates state and redirects to show the new campus\n\n      this.setState({\n        redirect: true,\n        redirectId: this.props.student.id\n      });\n    };\n\n    this.state = {\n      firstname: this.props.student.firstname,\n      lastname: this.props.student.lastname,\n      email: this.props.student.email,\n      imageUrl: this.props.student.imageUrl,\n      gpa: this.props.student.gpa,\n      campusId: this.props.student.campusId,\n      redirect: false,\n      redirectId: null\n    };\n  } // Get Student data from the db using campus id\n\n\n  componentDidMount() {\n    this.props.fetchStudent(this.props.match.params.id);\n  } //handles any 'changed data' aka whats inputted\n\n\n  //unomunts when components is being removed from the DOM\n  componentWillUnmount() {\n    this.setState({\n      redirect: false,\n      redirectId: null\n    });\n  } //re renders the page by routing it to campus page\n\n\n  render() {\n    if (this.state.redirect) {\n      return /*#__PURE__*/_jsxDEV(Redirect, {\n        to: `/student/${this.state.redirectId}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 14\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(EditStudentView, {\n        student: this.props.student,\n        handleChange: this.handleChange,\n        handleSubmit: this.handleSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst mapDispatch = dispatch => {\n  return {\n    editStudent: (student, id) => dispatch(editStudentThunk(student, id)),\n    fetchStudent: id => dispatch(fetchStudentThunk(id))\n  };\n}; // The following constructs the \"connect\" function used by EditCampusContainer to connect to Redux Store.\n// Passing Redux Thunk (action creator) as props to the \"connect\" function\n// The \"mapDispatch\" is to call the specific Thunk to dispatch its action.\n\n\nconst mapState = state => {\n  return {\n    student: state.student\n  };\n}; // Export store-connected container by default\n// EditCampusContainer uses \"connect\" function to connect to Redux Store and to read values from the Store\n// (and re-read the values when the Store State updates).\n\n\nexport default connect(mapState, mapDispatch)(EditStudentContainer);","map":{"version":3,"sources":["C:/Users/super/client-starter-code/src/components/containers/EditStudentContainer.js"],"names":["Header","Component","connect","Redirect","EditStudentView","fetchStudentThunk","editStudentThunk","EditStudentContainer","constructor","props","handleChange","event","setState","target","name","value","console","log","handleSubmit","preventDefault","student","firstname","state","lastname","email","imageUrl","gpa","campusId","editStudent","id","redirect","redirectId","componentDidMount","fetchStudent","match","params","componentWillUnmount","render","mapDispatch","dispatch","mapState"],"mappings":";AAAA,OAAOA,MAAP,MAAmB,UAAnB;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,QAAT,QAAyB,kBAAzB;AAEA,OAAOC,eAAP,MAA4B,0BAA5B;AACA,SAASC,iBAAT,EAA4BC,gBAA5B,QAAoD,oBAApD;;;AAEA,MAAMC,oBAAN,SAAmCN,SAAnC,CAA6C;AAC3C;AACAO,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAmBnBC,YAnBmB,GAmBHC,KAAD,IAAW;AACxB,WAAKC,QAAL,CAAc;AACZ,SAACD,KAAK,CAACE,MAAN,CAAaC,IAAd,GAAqBH,KAAK,CAACE,MAAN,CAAaE;AADtB,OAAd;AAGAC,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACD,KAxBkB;;AAAA,SA0BnBC,YA1BmB,GA0BJ,MAAOP,KAAP,IAAiB;AAC9B;AACAA,MAAAA,KAAK,CAACQ,cAAN;AACA,UAAIC,OAAO,GAAG;AACZC,QAAAA,SAAS,EAAE,KAAKC,KAAL,CAAWD,SADV;AAEZE,QAAAA,QAAQ,EAAE,KAAKD,KAAL,CAAWC,QAFT;AAGZC,QAAAA,KAAK,EAAE,KAAKF,KAAL,CAAWE,KAHN;AAIZC,QAAAA,QAAQ,EAAE,KAAKH,KAAL,CAAWG,QAJT;AAKZC,QAAAA,GAAG,EAAE,KAAKJ,KAAL,CAAWI,GALJ;AAMZC,QAAAA,QAAQ,EAAE,KAAKL,KAAL,CAAWK;AANT,OAAd,CAH8B,CAW9B;;AACA,YAAM,KAAKlB,KAAL,CAAWmB,WAAX,CAAuBR,OAAvB,EAAgC,KAAKX,KAAL,CAAWW,OAAX,CAAmBS,EAAnD,CAAN,CAZ8B,CAa9B;;AACA,WAAKjB,QAAL,CAAc;AACZkB,QAAAA,QAAQ,EAAE,IADE;AAEZC,QAAAA,UAAU,EAAE,KAAKtB,KAAL,CAAWW,OAAX,CAAmBS;AAFnB,OAAd;AAID,KA5CkB;;AAEjB,SAAKP,KAAL,GAAa;AACXD,MAAAA,SAAS,EAAE,KAAKZ,KAAL,CAAWW,OAAX,CAAmBC,SADnB;AAEXE,MAAAA,QAAQ,EAAE,KAAKd,KAAL,CAAWW,OAAX,CAAmBG,QAFlB;AAGXC,MAAAA,KAAK,EAAE,KAAKf,KAAL,CAAWW,OAAX,CAAmBI,KAHf;AAIXC,MAAAA,QAAQ,EAAE,KAAKhB,KAAL,CAAWW,OAAX,CAAmBK,QAJlB;AAKXC,MAAAA,GAAG,EAAE,KAAKjB,KAAL,CAAWW,OAAX,CAAmBM,GALb;AAMXC,MAAAA,QAAQ,EAAE,KAAKlB,KAAL,CAAWW,OAAX,CAAmBO,QANlB;AAOXG,MAAAA,QAAQ,EAAE,KAPC;AAQXC,MAAAA,UAAU,EAAE;AARD,KAAb;AAUD,GAd0C,CAgB3C;;;AACAC,EAAAA,iBAAiB,GAAG;AAClB,SAAKvB,KAAL,CAAWwB,YAAX,CAAwB,KAAKxB,KAAL,CAAWyB,KAAX,CAAiBC,MAAjB,CAAwBN,EAAhD;AACD,GAnB0C,CAoB3C;;;AA2BA;AACAO,EAAAA,oBAAoB,GAAG;AACrB,SAAKxB,QAAL,CAAc;AAAEkB,MAAAA,QAAQ,EAAE,KAAZ;AAAmBC,MAAAA,UAAU,EAAE;AAA/B,KAAd;AACD,GAlD0C,CAmD3C;;;AACAM,EAAAA,MAAM,GAAG;AACP,QAAI,KAAKf,KAAL,CAAWQ,QAAf,EAAyB;AACvB,0BAAO,QAAC,QAAD;AAAU,QAAA,EAAE,EAAG,YAAW,KAAKR,KAAL,CAAWS,UAAW;AAAhD;AAAA;AAAA;AAAA;AAAA,cAAP;AACD;;AACD,wBACE;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,eAAD;AACE,QAAA,OAAO,EAAE,KAAKtB,KAAL,CAAWW,OADtB;AAEE,QAAA,YAAY,EAAE,KAAKV,YAFrB;AAGE,QAAA,YAAY,EAAE,KAAKQ;AAHrB;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAUD;;AAlE0C;;AAqE7C,MAAMoB,WAAW,GAAIC,QAAD,IAAc;AAChC,SAAO;AACLX,IAAAA,WAAW,EAAE,CAACR,OAAD,EAAUS,EAAV,KAAiBU,QAAQ,CAACjC,gBAAgB,CAACc,OAAD,EAAUS,EAAV,CAAjB,CADjC;AAELI,IAAAA,YAAY,EAAGJ,EAAD,IAAQU,QAAQ,CAAClC,iBAAiB,CAACwB,EAAD,CAAlB;AAFzB,GAAP;AAID,CALD,C,CAMA;AACA;AACA;;;AACA,MAAMW,QAAQ,GAAIlB,KAAD,IAAW;AAC1B,SAAO;AACLF,IAAAA,OAAO,EAAEE,KAAK,CAACF;AADV,GAAP;AAGD,CAJD,C,CAKA;AACA;AACA;;;AACA,eAAelB,OAAO,CAACsC,QAAD,EAAWF,WAAX,CAAP,CAA+B/B,oBAA/B,CAAf","sourcesContent":["import Header from \"./Header\";\r\nimport { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nimport EditStudentView from \"../views/EditStudentView\";\r\nimport { fetchStudentThunk, editStudentThunk } from \"../../store/thunks\";\r\n\r\nclass EditStudentContainer extends Component {\r\n  // Initialize state\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      firstname: this.props.student.firstname,\r\n      lastname: this.props.student.lastname,\r\n      email: this.props.student.email,\r\n      imageUrl: this.props.student.imageUrl,\r\n      gpa: this.props.student.gpa,\r\n      campusId: this.props.student.campusId,\r\n      redirect: false,\r\n      redirectId: null,\r\n    };\r\n  }\r\n\r\n  // Get Student data from the db using campus id\r\n  componentDidMount() {\r\n    this.props.fetchStudent(this.props.match.params.id);\r\n  }\r\n  //handles any 'changed data' aka whats inputted\r\n  handleChange = (event) => {\r\n    this.setState({\r\n      [event.target.name]: event.target.value,\r\n    });\r\n    console.log(\"Student Updated\");\r\n  };\r\n  //handles data after submit button is pressed\r\n  handleSubmit = async (event) => {\r\n    //prevents page from refreshing after submitting\r\n    event.preventDefault();\r\n    let student = {\r\n      firstname: this.state.firstname,\r\n      lastname: this.state.lastname,\r\n      email: this.state.email,\r\n      imageUrl: this.state.imageUrl,\r\n      gpa: this.state.gpa,\r\n      campusId: this.state.campusId,\r\n    };\r\n    //updates Student data in the db\r\n    await this.props.editStudent(student, this.props.student.id);\r\n    //updates state and redirects to show the new campus\r\n    this.setState({\r\n      redirect: true,\r\n      redirectId: this.props.student.id,\r\n    });\r\n  };\r\n  //unomunts when components is being removed from the DOM\r\n  componentWillUnmount() {\r\n    this.setState({ redirect: false, redirectId: null });\r\n  }\r\n  //re renders the page by routing it to campus page\r\n  render() {\r\n    if (this.state.redirect) {\r\n      return <Redirect to={`/student/${this.state.redirectId}`} />;\r\n    }\r\n    return (\r\n      <div>\r\n        <header />\r\n        <EditStudentView\r\n          student={this.props.student}\r\n          handleChange={this.handleChange}\r\n          handleSubmit={this.handleSubmit}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatch = (dispatch) => {\r\n  return {\r\n    editStudent: (student, id) => dispatch(editStudentThunk(student, id)),\r\n    fetchStudent: (id) => dispatch(fetchStudentThunk(id)),\r\n  };\r\n};\r\n// The following constructs the \"connect\" function used by EditCampusContainer to connect to Redux Store.\r\n// Passing Redux Thunk (action creator) as props to the \"connect\" function\r\n// The \"mapDispatch\" is to call the specific Thunk to dispatch its action.\r\nconst mapState = (state) => {\r\n  return {\r\n    student: state.student,\r\n  };\r\n};\r\n// Export store-connected container by default\r\n// EditCampusContainer uses \"connect\" function to connect to Redux Store and to read values from the Store\r\n// (and re-read the values when the Store State updates).\r\nexport default connect(mapState, mapDispatch)(EditStudentContainer);"]},"metadata":{},"sourceType":"module"}