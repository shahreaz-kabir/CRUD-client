{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\super\\\\client-starter-code\\\\src\\\\components\\\\containers\\\\EditCampusContainer.js\";\nimport Header from './Header';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport EditCampusView from '../views/EditCampusView';\nimport { fetchCampusThunk, editCampusThunk } from '../../store/thunks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass EditCampusContainer extends Component {\n  // Initialize state\n  constructor(props) {\n    super(props);\n\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n      console.log(\"Campus Updated\");\n    };\n\n    this.handleSubmit = async event => {\n      //prevents page from refreshing after submitting\n      event.preventDefault();\n      let campus = {\n        name: this.state.name,\n        imageUrl: this.state.imageUrl,\n        address: this.state.address,\n        description: this.state.description\n      };\n      console.log(`${campus.name}`); //updates campus data in the db \n\n      await this.props.editCampus(campus, this.props.campus.id); //updates state and redirects to show the new campus \n\n      this.setState({\n        redirect: true,\n        redirectId: this.props.campus.id\n      });\n    };\n\n    this.state = {\n      name: this.props.campus.name,\n      imageUrl: this.props.campus.imageUrl,\n      address: this.props.campus.address,\n      description: this.props.campus.description,\n      redirect: false,\n      redirectId: null\n    };\n  } // Get campus data from the db using campus id\n\n\n  componentDidMount() {\n    this.props.fetchCampus(this.props.match.params.id);\n  } //handles any 'changed data' aka whats inputted\n\n\n  //unomunts when components is being removed from the DOM\n  componentWillUnmount() {\n    this.setState({\n      redirect: false,\n      redirectId: null\n    });\n  } //re renders the page by routing it to campus page\n\n\n  render() {\n    if (this.state.redirect) {\n      return /*#__PURE__*/_jsxDEV(Redirect, {\n        to: `/campus/${this.state.redirectId}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 22\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(EditCampusView, {\n        campus: this.props.campus,\n        handleChange: this.handleChange,\n        handleSubmit: this.handleSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst mapDispatch = dispatch => {\n  return {\n    editCampus: (campus, id) => dispatch(editCampusThunk(campus, id)),\n    fetchCampus: id => dispatch(fetchCampusThunk(id))\n  };\n}; // The following constructs the \"connect\" function used by EditCampusContainer to connect to Redux Store.  \n// Passing Redux Thunk (action creator) as props to the \"connect\" function\n// The \"mapDispatch\" is to call the specific Thunk to dispatch its action.\n\n\nconst mapState = state => {\n  return {\n    campus: state.campus\n  };\n}; // Export store-connected container by default\n// EditCampusContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\n\n\nexport default connect(mapState, mapDispatch)(EditCampusContainer);","map":{"version":3,"sources":["C:/Users/super/client-starter-code/src/components/containers/EditCampusContainer.js"],"names":["Header","Component","connect","Redirect","EditCampusView","fetchCampusThunk","editCampusThunk","EditCampusContainer","constructor","props","handleChange","event","setState","target","name","value","console","log","handleSubmit","preventDefault","campus","state","imageUrl","address","description","editCampus","id","redirect","redirectId","componentDidMount","fetchCampus","match","params","componentWillUnmount","render","mapDispatch","dispatch","mapState"],"mappings":"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","sourcesContent":["import Header from './Header';\r\nimport { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nimport EditCampusView from '../views/EditCampusView';\r\nimport { fetchCampusThunk, editCampusThunk } from '../../store/thunks';\r\n\r\nclass EditCampusContainer extends Component {\r\n\r\n    \r\n    // Initialize state\r\n    constructor(props){\r\n      super(props);\r\n      this.state = {\r\n        name: this.props.campus.name, \r\n        imageUrl: this.props.campus.imageUrl,\r\n        address: this.props.campus.address, \r\n        description: this.props.campus.description, \r\n        redirect: false, \r\n        redirectId: null\r\n      };\r\n    }\r\n\r\n    // Get campus data from the db using campus id\r\n    componentDidMount() {\r\n        this.props.fetchCampus(this.props.match.params.id);\r\n    }\r\n    //handles any 'changed data' aka whats inputted\r\n    handleChange = event => {\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        });\r\n        console.log(\"Campus Updated\");\r\n    }\r\n    //handles data after submit button is pressed\r\n    handleSubmit = async event => {\r\n        //prevents page from refreshing after submitting\r\n        event.preventDefault();\r\n        let campus = {\r\n            name: this.state.name,\r\n            imageUrl: this.state.imageUrl,\r\n            address: this.state.address,\r\n            description: this.state.description\r\n        };\r\n        console.log(`${campus.name}`);\r\n        //updates campus data in the db \r\n        await this.props.editCampus(campus,this.props.campus.id);\r\n        //updates state and redirects to show the new campus \r\n        this.setState({\r\n            redirect: true,\r\n            redirectId: this.props.campus.id\r\n        });\r\n    }\r\n    //unomunts when components is being removed from the DOM\r\n    componentWillUnmount() {\r\n        this.setState({redirect: false, redirectId: null});\r\n    }\r\n    //re renders the page by routing it to campus page\r\n    render(){\r\n        if(this.state.redirect){\r\n            return ( <Redirect to={`/campus/${this.state.redirectId}`}/>)\r\n        }\r\n        return (\r\n            <div>\r\n                <header />\r\n                <EditCampusView \r\n                    campus={this.props.campus}\r\n                    handleChange={this.handleChange}\r\n                    handleSubmit={this.handleSubmit}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapDispatch = (dispatch) => {\r\n      \r\n    return({\r\n        editCampus: (campus,id) => dispatch(editCampusThunk(campus,id)),\r\n        fetchCampus: (id) => dispatch(fetchCampusThunk(id)),\r\n    })\r\n}\r\n// The following constructs the \"connect\" function used by EditCampusContainer to connect to Redux Store.  \r\n// Passing Redux Thunk (action creator) as props to the \"connect\" function\r\n// The \"mapDispatch\" is to call the specific Thunk to dispatch its action.\r\nconst mapState = (state) => {\r\n    return {\r\n        campus: state.campus,\r\n    };\r\n};    \r\n// Export store-connected container by default\r\n// EditCampusContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \r\n// (and re-read the values when the Store State updates).\r\nexport default connect(mapState, mapDispatch)(EditCampusContainer);"]},"metadata":{},"sourceType":"module"}