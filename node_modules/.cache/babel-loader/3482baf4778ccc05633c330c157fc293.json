{"ast":null,"code":"/*==================================================\r\n/src/store/index.js\r\n\r\nIt contains the necessities and accessories for constructing the Redux Store.\r\nIt creates a single Redux Store that holds the complete state tree of the app, so that the Redux Store state can access the states in all Reducers. \r\n================================================== */\nimport { combineReducers, applyMiddleware, createStore } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunk from 'redux-thunk'; // Import all Reducers from the barrel file (/src/store/reducers/index.js)\n\nimport * as reducers from './reducers'; // Construct the Redux Store:\n// Create a single Root Reducer to combine all Reducers, so that the Redux Store state can \n// access the states in all Reducers of the app.\n\nconst rootReducer = combineReducers(reducers); // Create a logger middleware to log dispatched Actions in console,\n// so that it displays prevState, nextState, and Action when an Action is dispatched.\n\nconst logger = createLogger({\n  collapsed: true\n}); // Collapse console messages when displayed\n// Create a Redux Store using Root Reducer and a middleware pipeline consisting of Thunk and logger.\n\nconst store = createStore(rootReducer, applyMiddleware(thunk, logger)); // Export the Redux Store by default, which will be provided to and injected within our entire application\n\nexport default store;","map":{"version":3,"sources":["C:/Users/super/client-starter-code/src/store/index.js"],"names":["combineReducers","applyMiddleware","createStore","createLogger","thunk","reducers","rootReducer","logger","collapsed","store"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,eAAT,EAA0BC,eAA1B,EAA2CC,WAA3C,QAA8D,OAA9D;AACA,SAASC,YAAT,QAA6B,cAA7B;AACA,OAAOC,KAAP,MAAkB,aAAlB,C,CAEA;;AACA,OAAO,KAAKC,QAAZ,MAA0B,YAA1B,C,CAEA;AACA;AACA;;AACA,MAAMC,WAAW,GAAGN,eAAe,CAACK,QAAD,CAAnC,C,CACA;AACA;;AACA,MAAME,MAAM,GAAGJ,YAAY,CAAC;AAAEK,EAAAA,SAAS,EAAE;AAAb,CAAD,CAA3B,C,CAAmD;AACnD;;AACA,MAAMC,KAAK,GAAGP,WAAW,CAACI,WAAD,EAAcL,eAAe,CAACG,KAAD,EAAQG,MAAR,CAA7B,CAAzB,C,CAEA;;AACA,eAAeE,KAAf","sourcesContent":["/*==================================================\r\n/src/store/index.js\r\n\r\nIt contains the necessities and accessories for constructing the Redux Store.\r\nIt creates a single Redux Store that holds the complete state tree of the app, so that the Redux Store state can access the states in all Reducers. \r\n================================================== */\r\nimport { combineReducers, applyMiddleware, createStore } from 'redux';\r\nimport { createLogger } from 'redux-logger';\r\nimport thunk from 'redux-thunk';\r\n\r\n// Import all Reducers from the barrel file (/src/store/reducers/index.js)\r\nimport * as reducers from './reducers';\r\n\r\n// Construct the Redux Store:\r\n// Create a single Root Reducer to combine all Reducers, so that the Redux Store state can \r\n// access the states in all Reducers of the app.\r\nconst rootReducer = combineReducers(reducers);  \r\n// Create a logger middleware to log dispatched Actions in console,\r\n// so that it displays prevState, nextState, and Action when an Action is dispatched.\r\nconst logger = createLogger({ collapsed: true });  // Collapse console messages when displayed\r\n// Create a Redux Store using Root Reducer and a middleware pipeline consisting of Thunk and logger.\r\nconst store = createStore(rootReducer, applyMiddleware(thunk, logger));\r\n\r\n// Export the Redux Store by default, which will be provided to and injected within our entire application\r\nexport default store;"]},"metadata":{},"sourceType":"module"}