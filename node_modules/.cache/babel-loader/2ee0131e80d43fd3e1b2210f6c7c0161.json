{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\super\\\\client-starter-code\\\\src\\\\components\\\\containers\\\\NewCampusContainer.js\";\n\n/*==================================================\r\nNewCampusContainer.js\r\n\r\nThe Container component is responsible for stateful logic and data fetching, and\r\npasses data (if any) as props to the corresponding View component.\r\nIf needed, it also defines the component's \"connect\" function.\r\n================================================== */\nimport Header from './Header';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport NewCampusView from '../views/NewCampusView';\nimport { addCampusThunk } from '../../store/thunks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass NewCampusContainer extends Component {\n  // Initialize state\n  constructor(props) {\n    super(props);\n\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.handleSubmit = async event => {\n      event.preventDefault(); // Prevent browser reload/refresh after submit.\n\n      let campus = {\n        name: this.state.name,\n        address: this.state.address,\n        description: this.state.description,\n        campusId: this.state.id\n      };\n      console.log(campus); // Add new campus in back-end database\n\n      let newCampus = await this.props.addCampus(campus); // Update state, and trigger redirect to show the new campus\n\n      this.setState({\n        name: \"\",\n        address: \"\",\n        description: \"\",\n        campusId: null,\n        redirect: true,\n        redirectId: newCampus.id\n      });\n    };\n\n    this.state = {\n      name: \"\",\n      address: \"\",\n      description: \"\",\n      campusId: null,\n      redirect: false,\n      redirectId: null\n    };\n  } // Capture input data when it is entered\n\n\n  // Unmount when the component is being removed from the DOM:\n  componentWillUnmount() {\n    this.setState({\n      redirect: false,\n      redirectId: null\n    });\n  } // Render new campus input form\n\n\n  render() {\n    // Redirect to new campuses page after submit\n    if (this.state.redirect) {\n      return /*#__PURE__*/_jsxDEV(Redirect, {\n        to: `/campus/${this.state.redirectId}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this);\n    } // Display the input form via the corresponding View component\n\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(NewCampusView, {\n        handleChange: this.handleChange,\n        handleSubmit: this.handleSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }, this);\n  }\n\n} // The following input argument is passed to the \"connect\" function used by \"NewCampusContainer\" component to connect to Redux Store.\n// The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\n\n\nconst mapDispatch = dispatch => {\n  return {\n    addCampus: campus => dispatch(addCampusThunk(campus))\n  };\n}; // Export store-connected container by default\n// NewCampusContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\n\n\nexport default connect(null, mapDispatch)(NewCampusContainer);","map":{"version":3,"sources":["C:/Users/super/client-starter-code/src/components/containers/NewCampusContainer.js"],"names":["Header","Component","connect","Redirect","NewCampusView","addCampusThunk","NewCampusContainer","constructor","props","handleChange","event","setState","target","name","value","handleSubmit","preventDefault","campus","state","address","description","campusId","id","console","log","newCampus","addCampus","redirect","redirectId","componentWillUnmount","render","mapDispatch","dispatch"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,MAAP,MAAmB,UAAnB;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,QAAT,QAAyB,kBAAzB;AAEA,OAAOC,aAAP,MAA0B,wBAA1B;AACA,SAASC,cAAT,QAA+B,oBAA/B;;;AAEA,MAAMC,kBAAN,SAAiCL,SAAjC,CAA2C;AACvC;AACAM,EAAAA,WAAW,CAACC,KAAD,EAAO;AAChB,UAAMA,KAAN;;AADgB,SAalBC,YAbkB,GAaHC,KAAK,IAAI;AACtB,WAAKC,QAAL,CAAc;AACZ,SAACD,KAAK,CAACE,MAAN,CAAaC,IAAd,GAAqBH,KAAK,CAACE,MAAN,CAAaE;AADtB,OAAd;AAGD,KAjBiB;;AAAA,SAoBlBC,YApBkB,GAoBH,MAAML,KAAN,IAAe;AAC5BA,MAAAA,KAAK,CAACM,cAAN,GAD4B,CACH;;AAEzB,UAAIC,MAAM,GAAG;AACTJ,QAAAA,IAAI,EAAE,KAAKK,KAAL,CAAWL,IADR;AAETM,QAAAA,OAAO,EAAE,KAAKD,KAAL,CAAWC,OAFX;AAGTC,QAAAA,WAAW,EAAE,KAAKF,KAAL,CAAWE,WAHf;AAITC,QAAAA,QAAQ,EAAE,KAAKH,KAAL,CAAWI;AAJZ,OAAb;AAOAC,MAAAA,OAAO,CAACC,GAAR,CAAYP,MAAZ,EAV4B,CAW5B;;AACA,UAAIQ,SAAS,GAAG,MAAM,KAAKjB,KAAL,CAAWkB,SAAX,CAAqBT,MAArB,CAAtB,CAZ4B,CAa5B;;AACA,WAAKN,QAAL,CAAc;AACZE,QAAAA,IAAI,EAAE,EADM;AAEZM,QAAAA,OAAO,EAAE,EAFG;AAGZC,QAAAA,WAAW,EAAE,EAHD;AAIZC,QAAAA,QAAQ,EAAE,IAJE;AAKZM,QAAAA,QAAQ,EAAE,IALE;AAMZC,QAAAA,UAAU,EAAEH,SAAS,CAACH;AANV,OAAd;AAQD,KA1CiB;;AAEhB,SAAKJ,KAAL,GAAa;AACXL,MAAAA,IAAI,EAAE,EADK;AAEXM,MAAAA,OAAO,EAAE,EAFE;AAGXC,MAAAA,WAAW,EAAE,EAHF;AAIXC,MAAAA,QAAQ,EAAE,IAJC;AAKXM,MAAAA,QAAQ,EAAE,KALC;AAMXC,MAAAA,UAAU,EAAE;AAND,KAAb;AAQD,GAZsC,CAcvC;;;AAgCA;AACAC,EAAAA,oBAAoB,GAAG;AACnB,SAAKlB,QAAL,CAAc;AAACgB,MAAAA,QAAQ,EAAE,KAAX;AAAkBC,MAAAA,UAAU,EAAE;AAA9B,KAAd;AACH,GAjDsC,CAmDvC;;;AACAE,EAAAA,MAAM,GAAG;AACP;AACA,QAAG,KAAKZ,KAAL,CAAWS,QAAd,EAAwB;AACtB,0BAAQ,QAAC,QAAD;AAAU,QAAA,EAAE,EAAG,WAAU,KAAKT,KAAL,CAAWU,UAAW;AAA/C;AAAA;AAAA;AAAA;AAAA,cAAR;AACD,KAJM,CAMP;;;AACA,wBACE;AAAA,8BACE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,aAAD;AACE,QAAA,YAAY,EAAI,KAAKnB,YADvB;AAEE,QAAA,YAAY,EAAE,KAAKM;AAFrB;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AASD;;AApEsC,C,CAuEzC;AACA;AACA;;;AACA,MAAMgB,WAAW,GAAIC,QAAD,IAAc;AAC9B,SAAO;AACHN,IAAAA,SAAS,EAAGT,MAAD,IAAYe,QAAQ,CAAC3B,cAAc,CAACY,MAAD,CAAf;AAD5B,GAAP;AAGH,CAJD,C,CAMA;AACA;AACA;;;AACA,eAAef,OAAO,CAAC,IAAD,EAAO6B,WAAP,CAAP,CAA2BzB,kBAA3B,CAAf","sourcesContent":["/*==================================================\r\nNewCampusContainer.js\r\n\r\nThe Container component is responsible for stateful logic and data fetching, and\r\npasses data (if any) as props to the corresponding View component.\r\nIf needed, it also defines the component's \"connect\" function.\r\n================================================== */\r\nimport Header from './Header';\r\nimport { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nimport NewCampusView from '../views/NewCampusView';\r\nimport { addCampusThunk } from '../../store/thunks';\r\n\r\nclass NewCampusContainer extends Component {\r\n    // Initialize state\r\n    constructor(props){\r\n      super(props);\r\n      this.state = {\r\n        name: \"\", \r\n        address: \"\",\r\n        description: \"\",\r\n        campusId: null, \r\n        redirect: false, \r\n        redirectId: null\r\n      };\r\n    }\r\n  \r\n    // Capture input data when it is entered\r\n    handleChange = event => {\r\n      this.setState({\r\n        [event.target.name]: event.target.value\r\n      });\r\n    }\r\n  \r\n    // Take action after user click the submit button\r\n    handleSubmit = async event => {\r\n      event.preventDefault();  // Prevent browser reload/refresh after submit.\r\n  \r\n      let campus = {\r\n          name: this.state.name,\r\n          address: this.state.address,\r\n          description: this.state.description,\r\n          campusId: this.state.id,\r\n  \r\n      };\r\n      console.log(campus);\r\n      // Add new campus in back-end database\r\n      let newCampus = await this.props.addCampus(campus);\r\n      // Update state, and trigger redirect to show the new campus\r\n      this.setState({\r\n        name: \"\", \r\n        address: \"\",\r\n        description: \"\",\r\n        campusId: null,\r\n        redirect: true, \r\n        redirectId: newCampus.id\r\n      });\r\n    }\r\n  \r\n    // Unmount when the component is being removed from the DOM:\r\n    componentWillUnmount() {\r\n        this.setState({redirect: false, redirectId: null});\r\n    }\r\n  \r\n    // Render new campus input form\r\n    render() {\r\n      // Redirect to new campuses page after submit\r\n      if(this.state.redirect) {\r\n        return (<Redirect to={`/campus/${this.state.redirectId}`}/>)\r\n      }\r\n  \r\n      // Display the input form via the corresponding View component\r\n      return (\r\n        <div>\r\n          <Header />\r\n          <NewCampusView \r\n            handleChange = {this.handleChange} \r\n            handleSubmit={this.handleSubmit}      \r\n          />\r\n        </div>          \r\n      );\r\n    }\r\n  }\r\n  \r\n  // The following input argument is passed to the \"connect\" function used by \"NewCampusContainer\" component to connect to Redux Store.\r\n  // The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\r\n  // The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\r\n  const mapDispatch = (dispatch) => {\r\n      return({\r\n          addCampus: (campus) => dispatch(addCampusThunk(campus)),\r\n      })\r\n  }\r\n  \r\n  // Export store-connected container by default\r\n  // NewCampusContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \r\n  // (and re-read the values when the Store State updates).\r\n  export default connect(null, mapDispatch)(NewCampusContainer);"]},"metadata":{},"sourceType":"module"}